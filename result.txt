OS:Linux
JVM:Oracle Corporation 1.8.0_131
CPU:null os-arch:null
Cores (incl HT):8
1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11,OpenJDK 64-Bit Server VM,Linux

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        2706           1870           4576            864
Kryo 4.0.0                                   2608           2242           4850            708
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        1986           1478           3464            882
Kryo 4.0.0                                   2618           2320           4938            722
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       21634          13518          35152           4672
Kryo 4.0.0                                  28218          19906          48124           4612
</pre>


================================
Test Class: LargeNativeIntArrays
================================
measures performance serializing a large int array, a large long array and a large double array filled with random values. Note that random values destroy any value compression.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       32295          17230          49525          31217
Kryo 4.0.0                                  44035          40273          84308          34820
</pre>


==================================
Test Class: LargeAndStrangeStrings
==================================
measures serialization of mid size to very large unicode Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       27572          14217          41789          20002
Kryo 4.0.0                                  74839          49804         124643          17716
</pre>


======================
Test Class: Primitives
======================
Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        1799           1189           2988            302
Kryo 4.0.0                                   2113           1380           3493            315
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       43152          32569          75721          15112
Kryo 4.0.0                                  47867          44150          92017           9022
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       42939          30617          73556           8345
Kryo 4.0.0                                  88975          40339         129314           8323
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       54752          51132         105884           6072
Kryo 4.0.0                                  59232          66405         125637           5919
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        4921           3027           7948           1061
Kryo 4.0.0                                   6439           4283          10722           1220
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       51898          43724          95622           8971
Kryo 4.0.0                                  56557          56521         113078           4733
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                     2692660        2496845        5189505         401976
Kryo 4.0.0                                3346367        2828982        6175349         321022
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       56114          50803         106917           4748
Kryo 4.0.0                                  55420          64238         119658           5009
</pre>


========================
Test Class: MediaContent
========================
measures serializing the cyclefree object structure used by one of the most known encoding/decoding tests


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        1468           1045           2513            322
Kryo 4.0.0                                   1539           1258           2797            288
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 4.0.0                                     95             99            194              2
FST 2                                         128            134            262              3
</pre>


=========================
Test Class: LargeFPArrays
=========================
measures performance serializing a large flaot and a large double array filled with random values. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       23406          11299          34705          20812
Kryo 4.0.0                                 101283          14309         115592          20807
</pre>


=====================
Test Class: BasicJSon
=====================

<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 4.0.0                                   1745           1235           2980            225
FST 2                                        2613           2407           5020            420
</pre>


==========================
Test Class: JSonCollection
==========================
a map of String=>int and a list holding a pojo, some numbers and a string


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        1187            813           2000            200
Kryo 4.0.0                                   1647           1201           2848            234
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                         264            219            483             25
Kryo 4.0.0                                    407            343            750             41
</pre>

