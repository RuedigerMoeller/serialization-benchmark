OS:Linux
JVM:Oracle Corporation 1.8.0_11
CPU:null os-arch:null
Cores (incl HT):32
1.8.0_11-b12,Java HotSpot(TM) 64-Bit Server VM,Linux

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 2.23                                    5892           5375          11267            708
FST 1.58                                     7123           4612          11735            836
FST                                         11598           5335          16933            846
Java built in                               31447          12971          44418           1143
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          6041           3850           9891            864
FST 1.58                                     5757           4719          10476            964
Kryo 2.23                                    5862           5679          11541            722
Java built in                               20247           7768          28015           1065
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                    35938          28550          64488           4671
FST                                         49457          38646          88103           4672
Kryo 2.23                                   64690          49809         114499           4606
Java built in                              228832         295202         524034           8435
</pre>


================================
Test Class: LargeNativeIntArrays
================================
measures performance serializing a large int array, a large long array filled with random values. Note that random values destroy any value compression, so the increased size of kryo in this test will not be observable in most real world data.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         37530          22141          59671          20815
Java built in                               44522          24488          69010          20968
FST 1.58                                    47935          28627          76562          20814
Kryo 2.23                                   77856          70378         148234          24551
</pre>


=========================
Test Class: LargeFPArrays
=========================
measures performance serializing a large flaot and a large double array filled with random values. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 2.23                                     274            245            519              3
FST 1.58                                      294            245            539              3
FST                                           322            320            642              4
Java built in                                8327           1726          10053            121
</pre>


=============================
Test Class: StringPerformance
=============================
measures serialization of mid size to very long Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                    65794          36101         101895          20020
FST                                         64341          38098         102439          20021
Kryo 2.23                                  160226         100506         260732          17716
Java built in                              166196         223458         389654          17931
</pre>


======================
Test Class: Primitives
======================
A broad test of primitive values and specials such as Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 
 plus opaque private field with same name in a private subclass


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                     3520           3051           6571            309
FST                                          3949           3625           7574            296
Kryo 2.23                                    4888           4022           8910            315
Java built in                              103472          19913         123385           1548
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                        125555         102025         227580          15456
FST 1.58                                   136760          99455         236215          22764
Kryo 2.23                                  131392         132347         263739           9681
Java built in                              309414         198465         507879          20774
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 2.23 FAIL                                  0              0              0              0
FST 1.58                                   114268          88809         203077           8508
FST                                        131729         142437         274166           8676
Java built in                              438112         288237         726349          13172
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                    91038         100859         191897           5257
FST                                        115852         130285         246137           6001
Kryo 2.23                                  129407         145441         274848           5918
Java built in                              372415         332327         704742          11075
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                    10776           8124          18900           1000
FST                                         12501           9695          22196           1021
Kryo 2.23                                   14580          11470          26050           1220
Java built in                              197417          41887         239304           3062
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                   122364         136487         258851          10137
Kryo 2.23                                  122351         152962         275313           4733
FST                                        133660         165615         299275           7773
Java built in                              271872         287617         559489          14840
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                  6078805        5835689       11914494         432646
FST                                       6886542        7193896       14080438         390518
Kryo 2.23                                 7522036        7186338       14708374         322313
Java built in                            12344694       13980249       26324943         588458
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                   117667          99326         216993           3747
FST                                        133453         185380         318833           4748
Kryo 2.23                                  149556         181154         330710           5009
Java built in                              274065         364673         638738          10182
</pre>


========================
Test Class: MediaContent
========================
measures serializing the cyclefree object structure used by one of the most known encoding/decoding tests


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                     3653           2662           6315            316
Kryo 2.23                                    3659           2813           6472            286
FST                                          3867           3343           7210            320
Java built in                               63479          11949          75428            889
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 1.58                                      481            326            807             15
FST                                           494            427            921             16
Kryo 2.23                                     626            504           1130             32
Java built in                               15798           2546          18344            220
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 2.23                                     228            191            419              2
FST 1.58                                      268            253            521              2
FST                                           302            347            649              3
Java built in                                7596           1652           9248            100
</pre>

