OS:Linux
JVM:Oracle Corporation 1.8.0_40
CPU:null os-arch:null
Cores (incl HT):20
1.8.0_40-b26,Java HotSpot(TM) 64-Bit Server VM,Linux

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        4174           3026           7200            846
FST                                          4339           3050           7389            836
Kryo 3.01                                    4093           3659           7752            708
Java built in                               19916           7905          27821           1143
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        3272           2245           5517            864
FST                                          4094           3437           7531            964
Kryo 3.01                                    4120           3738           7858            722
Java built in                               13218           4912          18130           1065
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         25106          19813          44919           4671
FST 2                                       31154          37061          68215           4672
Kryo 3.01                                   39444          29276          68720           4607
Java built in                              204249         268042         472291           8435
</pre>


================================
Test Class: LargeNativeIntArrays
================================
measures performance serializing a large int array, a large long array and a large double array filled with random values. Note that random values destroy any value compression.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       38915          26560          65475          31220
FST                                         42291          31560          73851          31219
Java built in                               45548          31534          77082          31406
Kryo 3.01                                   68418          63698         132116          34789
</pre>


==================================
Test Class: LargeAndStrangeStrings
==================================
measures serialization of mid size to very large unicode Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       35894          21520          57414          20002
FST                                         40102          22388          62490          20020
Kryo 3.01                                  112527          72268         184795          17716
Java built in                              126377          99104         225481          17936
</pre>


======================
Test Class: Primitives
======================
Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          2229           1872           4101            309
FST 2                                        2253           1869           4122            296
Kryo 3.01                                    2833           2154           4987            315
Java built in                               62640          11440          74080           1548
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       70299          50830         121129          14860
FST                                         73922          52260         126182          19341
Kryo 3.01                                   75596          64099         139695           9022
Java built in                              196824         107798         304622          19663
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01 FAIL                                  0              0              0              0
FST                                         76566          60468         137034           8508
FST 2                                       63697          74661         138358           8345
Java built in                              316441         227359         543800          13172
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         76728          72090         148818           5257
FST 2                                       82577          81479         164056           5944
Kryo 3.01                                  101958          96594         198552           5918
Java built in                              277583         248401         525984          11075
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        7364           4965          12329           1021
FST                                          7702           4757          12459           1000
Kryo 3.01                                   10159           6938          17097           1220
Java built in                              129808          24490         154298           3062
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       75013          94262         169275           7773
FST                                         86141         102584         188725          10137
Kryo 3.01                                  100330          96588         196918           4733
Java built in                              212796         222480         435276          14840
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                     4057273        5057886        9115159         380230
FST                                       4509118        4661719        9170837         425571
Kryo 3.01                                 5660769        4666090       10326859         321008
Java built in                             9282623       10932466       20215089         586260
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       85605         108403         194008           4748
FST                                         95876          99206         195082           3747
Kryo 3.01                                  105005         107131         212136           5009
Java built in                              187985         280901         468886          10182
</pre>


========================
Test Class: MediaContent
========================
measures serializing the cyclefree object structure used by one of the most known encoding/decoding tests


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        2179           1848           4027            318
FST                                          2515           1792           4307            316
Kryo 3.01                                    2442           2032           4474            286
Java built in                               37601           7114          44715            889
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                     142            131            273              2
FST                                           230            179            409              2
FST 2                                         212            238            450              3
Java built in                                4093            918           5011            100
</pre>


=========================
Test Class: LargeFPArrays
=========================
measures performance serializing a large flaot and a large double array filled with random values. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Java built in                               29155          25412          54567          20965
FST 2                                       40599          18847          59446          20812
FST                                         31068          31467          62535          20811
Kryo 3.01                                  158557          22009         180566          20807
</pre>


=====================
Test Class: BasicJSon
=====================

<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                    2960           2015           4975            225
FST                                          3868           2918           6786            417
FST 2                                        4359           3431           7790            418
Java built in                               85091          18427         103518           1899
</pre>


==========================
Test Class: JSonCollection
==========================
a map of String=>int and a list holding a pojo, some numbers and a string


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          2156           1497           3653            200
FST 2                                        1890           1880           3770            200
Kryo 3.01                                    2675           2018           4693            234
Java built in                               34732           8910          43642            760
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                         453            390            843             25
FST                                           551            318            869             25
Kryo 3.01                                     625            522           1147             41
Java built in                               15059           2166          17225            305
</pre>

