OS:Linux
JVM:Oracle Corporation 1.8.0_40
CPU:null os-arch:null
Cores (incl HT):20
1.8.0_40-b26,Java HotSpot(TM) 64-Bit Server VM,Linux

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        4287           2952           7239            846
Kryo 3.01                                    4157           3690           7847            708
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        3300           2528           5828            864
Kryo 3.01                                    4186           3865           8051            722
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                   38806          31458          70264           4616
FST 2                                       33659          37430          71089           4672
</pre>


================================
Test Class: LargeNativeIntArrays
================================
measures performance serializing a large int array, a large long array and a large double array filled with random values. Note that random values destroy any value compression, so the increased size of kryo in this test will not be observable in most real world data.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       39262          26447          65709          31220
Kryo 3.01                                   68350          63250         131600          34761
</pre>


=========================
Test Class: LargeFPArrays
=========================
measures performance serializing a large flaot and a large double array filled with random values. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       43175          18944          62119          20812
Kryo 3.01                                  158659          22097         180756          20807
</pre>


=============================
Test Class: StringPerformance
=============================
measures serialization of mid size to very long Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       35894          21386          57280          20002
Kryo 3.01                                  119740          72464         192204          17716
</pre>


======================
Test Class: Primitives
======================
A broad test of primitive values and specials such as Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 
 plus opaque private field with same name in a private subclass


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        2202           1841           4043            296
Kryo 3.01                                    2890           2094           4984            315
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       69136          50487         119623          14860
Kryo 3.01                                   74449          66806         141255           9022
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01 FAIL                                  0              0              0              0
FST 2                                       62769          75311         138080           8345
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       79756          82760         162516           5944
Kryo 3.01                                  102399         105549         207948           5918
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        7545           4953          12498           1021
Kryo 3.01                                   10108           7182          17290           1220
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       77971          95088         173059           7773
Kryo 3.01                                  103553          95214         198767           4733
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                     4050622        4724793        8775415         380225
Kryo 3.01                                 5563595        4687503       10251098         321003
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       96225         104885         201110           4748
Kryo 3.01                                  104035         108628         212663           5009
</pre>


========================
Test Class: MediaContent
========================
measures serializing the cyclefree object structure used by one of the most known encoding/decoding tests


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        2272           1902           4174            318
Kryo 3.01                                    2522           1961           4483            286
</pre>


=============================
Test Class: StringPerformance
=============================
measures serialization of mid size to very long Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       35800          21669          57469          20002
Kryo 3.01                                  113060          72615         185675          17716
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                         380            307            687             16
Kryo 3.01                                     481            362            843             32
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                     149            130            279              2
FST 2                                         216            240            456              3
</pre>

