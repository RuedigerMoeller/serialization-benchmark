OS:Linux
JVM:Oracle Corporation 1.8.0_40
CPU:null os-arch:null
Cores (incl HT):20
1.8.0_40-b26,Java HotSpot(TM) 64-Bit Server VM,Linux

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                  171887         128537         300424            708
FST 2                                      166480         217374         383854            846
FST JSON                                   429175         340092         769267           2219
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST JSON FAIL                                   0              0              0              0
FST 2                                       55898          56596         112494            864
Kryo 3.01                                   65793          53627         119420            722
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                      178591         472645         651236           4672
Kryo 3.01                                  329572         322380         651952           4613
FST JSON(ERR)                              518024         484590        1002614           8884
</pre>


================================
Test Class: LargeNativeIntArrays
================================
measures performance serializing a large int array, a large long array and a large double array filled with random values. Note that random values destroy any value compression.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                  288382         283021         571403          34798
FST 2                                      644905         560622        1205527          31220
FST JSON(ERR)                             2550835        3239419        5790254          83150
</pre>


==================================
Test Class: LargeAndStrangeStrings
==================================
measures serialization of mid size to very large unicode Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                  253032         153636         406668          17716
FST 2                                      196525         241628         438153          20002
FST JSON(ERR)                              483395         368951         852346          96829
</pre>


======================
Test Class: Primitives
======================
Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       28228          30997          59225            296
Kryo 3.01                                   81657          27288         108945            315
FST JSON(ERR)                              126918         118970         245888            801
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                      396054         508575         904629          14860
Kryo 3.01                                 1072088         317773        1389861           9022
FST JSON(ERR)                             1530798        1115809        2646607          37557
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01 FAIL                                  0              0              0              0
FST JSON FAIL                                   0              0              0              0
FST 2                                      363780        1077891        1441671           8345
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                      209593         219722         429315           5944
Kryo 3.01                                  228303         374425         602728           5918
FST JSON(ERR)                             1335055         512217        1847272          54284
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       17312           9346          26658           1021
Kryo 3.01                                   29690          28607          58297           1220
FST JSON(ERR)                              148346          29724         178070           5381
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST JSON FAIL                                   0              0              0              0
Kryo 3.01                                  161642         250445         412087           4733
FST 2                                      200132         223327         423459           7773
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST JSON FAIL                                   0              0              0              0
FST 2                                     5944257        5488113       11432370         380230
Kryo 3.01                                 7114197        5075360       12189557         321008
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                  102040         101501         203541           5009
FST 2                                       87660         128652         216312           4748
FST JSON(ERR)                             1203852         327113        1530965         105998
</pre>


========================
Test Class: MediaContent
========================
measures serializing the cyclefree object structure used by one of the most known encoding/decoding tests


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        4381           5147           9528            318
Kryo 3.01                                    7021           4366          11387            286
FST JSON(ERR)                               25152          35172          60324            741
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                     390            310            700              2
FST 2                                         518            573           1091              3
FST JSON(ERR)                                9506          10768          20274             95
</pre>


=========================
Test Class: LargeFPArrays
=========================
measures performance serializing a large flaot and a large double array filled with random values. 


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                       39622          47003          86625          20812
Kryo 3.01                                  281623          71888         353511          20807
FST JSON(ERR)                             2732500        6828461        9560961          86602
</pre>


=====================
Test Class: BasicJSon
=====================

<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                   54394          15207          69601            225
FST 2                                       38244          37726          75970            418
FST JSON(ERR)                              164318         134246         298564           1313
</pre>


==========================
Test Class: JSonCollection
==========================
a map of String=>int and a list holding a pojo, some numbers and a string


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST 2                                        5158           2989           8147            200
Kryo 3.01                                    6310           3803          10113            234
FST JSON(ERR)                               22478          11721          34199            422
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
Kryo 3.01                                    1310            756           2066             41
FST 2                                        1762            839           2601             25
FST JSON(ERR)                                9613           5776          15389            200
</pre>

